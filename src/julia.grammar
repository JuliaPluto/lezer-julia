@precedence {
  quote @left
  dot @left
  where @left // Inner `where`
  decl @left
  power @right
  unary @right
  juxt @right
  bitshift @left
  rational @left
  times @left
  plus @left
  colon @left
  pipe-right @left
  pipe-left @right
  comparison @left
  lazy-and @right
  lazy-or @right
  arrow @right
  ternary @right
  pair @right
  afunc @right
  generator
  vec
  tup // Comma outside parentheses (OpenTuple)
  assignment @right
  simple @right
  mat
  macro
}

@skip { _ws | LineComment | BlockComment }

@top Program { block? }

block { top-level (_t top-level)* _t? }

top-level { expr | OpenAssignment | OpenTuple }

// OpenTuples cannot be nested, so they're not considered expressions.
OpenTuple { expr (!tup ',' expr)+ }

// Assignments inside blocks, including top-level.
OpenAssignment[@name=Assignment] {
  (primary-expr | operation<expr> | Operator | OpenTuple)
  !assignment (AssignmentOp | UpdateOp | TildeOp) !assignment
  top-level
}

// Assignments inside brackets cannot contain OpenTuples.
_binding<alias, expr> {
  [@name={alias}] {
      (primary-expr | operation<expr> | Operator)
      !assignment (AssignmentOp | UpdateOp | TildeOp) !assignment
      (expr | _binding<'Assignment', expr>)
  }
}
binding<alias> { _binding<alias, expr> }
binding-idx<alias> { _binding<alias, expr-idx> }

// Almost everything else is an expression.
expression<expr> {
  ( primary-expr
  | operation<expr>
  | OpenMacrocallExpression
  | ArrowFunctionExpression
  | JuxtapositionExpression
  | TernaryExpression<expr>
  | Operator
  | FloatLiteral
  | IntegerLiteral
  )
}

// Expression in "normal" context
expr { expression<expr> | simple-statement | compound-statement | definition }

// Expressions inside arrays
expr-idx { expression<expr-idx> | kw<'begin'> | kw<'end'> }


// STATEMENTS

// Allow keywords as identifiers when necessary.
kw<term> { @specialize[@name={term},group='keyword']<Identifier, term> }
kwid[@dynamicPrecedence=1]<term> { @extend[@name={term},group='keyword']<Identifier, term> }

end { kw<'end'> }

ImportPath { ('.'+ immediateIdentifier)? Identifier (!dot immediateDot '.' Identifier)* }
ImportAlias { importable kwid<'as'> exportable }

exportable { Identifier | MacroIdentifier | Operator | parens<exportable> }
importable { ImportPath | MacroIdentifier | Operator | parens<exportable> }

import-list { sep1<(!tup ','), (importable | ImportAlias)> }
SelectedImport[@dynamicPrecedence=1] { ImportPath immediateColon ':' import-list }

simple-statement {
  ( BreakStatement { kw<'break'> }
  | ContinueStatement { kw<'continue'> }
  | ReturnStatement { kw<'return'> (!simple top-level)? }
  | ConstStatement  { kw<'const'>  !simple OpenAssignment }
  | GlobalStatement { kw<'global'> !simple top-level }
  | LocalStatement  { kw<'local'>  !simple top-level }
  | ExportStatement { kw<'export'> !simple sep1<(!tup ','), exportable> }
  | PublicStatement { kw<'public'> !simple sep1<(!tup ','), exportable> }
  | ImportStatement { kw<'import'> !simple (import-list | SelectedImport) }
  | UsingStatement { kw<'using'> !simple (import-list | SelectedImport) }
  )
}

Condition { expr _t? }
ElseIfClause { kw<'elseif'> Condition block? }
CatchClause  { kw<'catch'> ExceptionCapture { !simple Identifier }? block? }
ElseClause   { kw<'else'> block? }
FinallyClause{ kw<'finally'> block? }

compound-statement[@isGroup=CompoundStatement] {
  ( BeginStatement { kw<'begin'> block? end }
  | QuoteStatement { kw<'quote'> block? end }
  | WhileStatement { kw<'while'> Condition block? end }
  | ForStatement { kw<'for'> sep1<',', ForBinding> _t? block? end }
  | LetStatement { kw<'let'> sep1<',', LetBinding { binding<'Assignment'> | Identifier }>? _t block? end }
  | IfStatement {
      kw<'if'> Condition block? ElseIfClause* ElseClause? end
    }
  | TryStatement {
      kw<'try'> block? (CatchClause ElseClause?)? FinallyClause? end
    }
  )
}

TypeHead { primary-expr | BinaryExpression<expr> }

definition[@isGroup=Definition] {
  ( AbstractDefinition { kwid<'abstract'> kwid<'type'> TypeHead end }
  | PrimitiveDefinition { kwid<'primitive'> kwid<'type'> TypeHead IntegerLiteral end }
  | StructDefinition { kwid<'mutable'>? kw<'struct'> TypeHead (_t block?)? end } // TODO: Allow skipping terminator
  | ModuleDefinition { (kw<'module'> | kw<'baremodule'>) Identifier _t? block? end }
  | MacroDefinition { 
      kw<'macro'>
      ( Signature { Identifier }
      | Signature { CallExpression } _t? block?
      )
      end
    }
  | FunctionDefinition {
      kw<'function'>
      ( Signature { Identifier }
      | Signature { !simple (CallExpression | TupleExpression | BinaryExpression<expr>) } _t? block?
      )
      end
    }
  )
}


// PRIMARY EXPRESSIONS

primary-expr {
  ( Identifier
  | BoolLiteral { @specialize<Identifier, 'true' | 'false'> }
  | CharLiteral
  | Symbol
  | string
  | array
  | BraceExpression
  | ParenExpression
  | TupleExpression
  | AdjointExpression { primary-expr immediateQuote "'" }
  | FieldExpression { primary-expr !dot immediateDot '.' Field { Symbol | QuoteExpression | string | Word } }
  | IndexExpression { primary-expr immediateBracket array }
  | ParametrizedExpression { primary-expr immediateBrace BraceExpression }
  | CallExpression
  | ClosedMacrocallExpression
  | InterpExpression
  | QuoteExpression
  )
}

sep<delim, rule> { (rule (delim rule)* delim?)? }
sep1<delim, rule> { rule (delim rule)* }

BraceExpression { '{' sep<',', expr | binding<'Assignment'>> '}' }
ParenExpression[@dynamicPrecedence=1] { '(' sep1<';', (expr | binding<'Assignment'> | Generator<expr>) ~tup-or-par> ')' }

// Parentheses where multiple expressions are not allowed.
parens[@name=ParenExpression]<x> { '(' x ')' }

tuple {
  '('
  sep<',', expr | binding<'KwArg'> | Generator<expr>>
  ~tup-or-par
  KeywordArguments { ';' sep<',', expr | binding<'KwArg'>> }?
  ')'
}

// Tuples and arguments are parsed the same, but used in different contexts.
Arguments { tuple }
TupleExpression { tuple }


// NOTE: binding `in` is a keyword, membership `in` is a function
ForBinding { kwid<'outer'>? (Identifier | TupleExpression) !assignment AssignmentOp { '=' | '∈' | kwid<'in'> } expr }
GenFor { kw<'for'> sep1<(!tup ','), ForBinding> }
GenFilter { kw<'if'> expr }
Generator<expr> { expr !simple GenFor (GenFor | GenFilter)* }

MatrixRow { (!mat expr-idx)+ }

array {
  ( ComprehensionExpression { '[' !generator Generator<expr-idx> ']' }
  | MatrixExpression { '[' MatrixRow (_t MatrixRow)* _t? ']' }
  | VectorExpression { '[' sep<',', (!vec (expr-idx | binding-idx<'Assignment'>))> ']' }
  )
}


DoClause[group=CompoundStatement]{ kw<'do'> Parameters { sep1<',', Identifier | TupleExpression | operation<expr>>? } _t block? end }

CallExpression {
  (primary-expr (immediateDot '.')? | Operator)
  immediateParen Arguments
  DoClause?
}

macro-head { MacroIdentifier | [@name=FieldExpression]{ primary-expr immediateDot '.' MacroIdentifier } }

ClosedMacrocallExpression[@name=MacrocallExpression] {
  macro-head
  ( immediateBracket array
  | immediateBrace BraceExpression
  | immediateParen Arguments
  )
  DoClause?
}

OpenMacrocallExpression[@name=MacrocallExpression] {
  macro-head
  MacroArguments { macro-arg[@dynamicPrecedence=-1] { (!macro top-level) }+ }?
}

// Interpolations don't require immediate* rules
InterpExpression[@dynamicPrecedence=1] {
  '$' !quote
  ( Identifier
  | Operator
  | BraceExpression
  | ParenExpression
  | TupleExpression
  | array
  | ClosedMacrocallExpression
  // | OpenMacrocallExpression
  )
}

QuoteExpression[@dynamicPrecedence=1] {
  ':' !quote
  ( immediateBrace BraceExpression
  | immediateParen ParenExpression
  | immediateParen TupleExpression
  | immediateBracket array
  | immediateAt ClosedMacrocallExpression
  // | immediateAt OpenMacrocallExpression // TODO
  | immediateParen parens<SyntacticOperator>
  )
}

Symbol {
  ':' !quote
  ( immediateIdentifier Word
  | Operator // TODO: immediateOperator?
  | SyntacticOperator
  )
}

// OPERATIONS

operation<expr> {
  ( SplatExpression { expr !colon '...' }
  | UnaryExpression { (TildeOp | TypeComparisonOp | UnaryOp | UnaryPlusOp) !unary expr }
  | [@name=UnaryExpression] { '::' !unary Type { expr } }
  | BinaryExpression<expr>
  )
}

BinaryExpression<expr> {
  ( expr !where      kwid<'where'> !where Type { expr }
  | expr !decl       '::' Type { expr }
  | expr !power      PowerOp !power expr
  | expr !bitshift   BitshiftOp !bitshift expr
  | expr !rational   RationalOp !rational expr
  | expr !times      TimesOp !times expr
  | expr !plus       (PlusOp | UnaryPlusOp | Dollar { '$' }) !plus expr
  | expr !colon      (EllipsisOp | Colon { ':' }) !colon expr
  | expr !pipe-right PipeRightOp !pipe-right expr
  | expr !pipe-left  PipeLeftOp !pipe-left expr
  | expr !comparison (ComparisonOp | TypeComparisonOp | membership-operator) !comparison expr
  | expr !lazy-and   LazyAndOp expr
  | expr !lazy-or    LazyOrOp expr
  | expr !arrow      ArrowOp !arrow expr
  | expr !pair       PairOp !pair expr
  )
}

ArrowFunctionExpression { (Identifier | TupleExpression) !afunc '->' !afunc (expr | binding<'Assignment'>) }

// JuxtapositionExpression is non-associative
// TODO: Handle monomials like 3x^2 with the correct precedence
JuxtapositionExpression {
  ( (IntegerLiteral | FloatLiteral) ((!juxt immediateIdentifier primary-expr) | (!juxt immediateParen primary-expr))
  | primary-expr (!juxt immediateIdentifier primary-expr)
  )
  (!juxt immediateIdentifier primary-expr)*
}

TernaryExpression<expr> { expr !ternary '?' !ternary expr !ternary ':' !ternary expr }


Operator {
  ( TildeOp
  | TypeComparisonOp
  | UnaryOp
  | UnaryPlusOp
  | PowerOp
  | BitshiftOp
  | RationalOp
  | TimesOp
  | PlusOp
  | EllipsisOp
  | Dollar { '$' }
  | Colon { ':' }
  | PipeRightOp
  | PipeLeftOp
  | ComparisonOp
  | ArrowOp
  | PairOp
  )
}

// TODO: membership operators should NOT be highlighted as keywords.
membership-operator { kwid<'in'> | kwid<'isa'> }

// Operators that cannot be used as identifiers
SyntacticOperator[@name=Operator] {
  ( '.'
  | '::'
  | '...'
  | LazyAndOp
  | LazyOrOp
  | '?'
  | '->'
  | AssignmentOp
  | UpdateOp
  )
}


// STRINGS

string {
  ( StringLiteral
  | CommandLiteral
  | NsStringLiteral { Identifier immediateDoubleQuote ns-str (!juxt immediateIdentifier Word)? }
  | NsCommandLiteral { Identifier immediateBackquote ns-cmd (!juxt immediateIdentifier Word)? }
  )
}

@skip {} {
  // Non-standard string literals don't have interpolations, and only have basic escape sequences.
  _s<delim, content> { delim (content)* delim }
  s<delim, content, interp> { _s<delim, content | [@name='$']{ '$' } interp | EscapeSequence> }
  ns<delim, content, esc> { _s<delim, content | '$' | '\\' | [@name=EscapeSequence]{ '\\\\' | esc }> }

  // Commands support the same interpolations as InterpExpression.
  str-interp { Identifier | parens<expr> }
  cmd-interp { Identifier | BraceExpression | ParenExpression | TupleExpression | array }

  // Strings can be single or triple quoted
  StringLiteral  { s<str1-quote, str1-content, str-interp> | s<str3-quote, str3-content, str-interp> }
  CommandLiteral { s<cmd1-quote, cmd1-content, cmd-interp> | s<cmd3-quote, cmd3-content, cmd-interp> }

  ns-str { ns<str1-quote, str1-content, '\\"'> | ns<str3-quote, str3-content, '\\"'> }
  ns-cmd { ns<cmd1-quote, cmd1-content, '\\`'> | ns<cmd3-quote, cmd3-content, '\\`'> }

  // Rules that should be tokens, but aren't...
  BlockComment { block-comment-start (block-comment-content | '#' | '=' | BlockComment)* '=#' }
  MacroIdentifier { '@' (Identifier | Operator | SyntacticOperator) }
  Word[@name=Identifier]{ word }
}

// immediateIdentifier must be listed _before_ identifier.
// The order of external tokens matters!
@external tokens immediate from "./tokens.js" {
  immediateDot,
  immediateColon,
  immediateAt,
  immediateBrace,
  immediateBracket,
  immediateParen,
  immediateBackquote,
  immediateDoubleQuote,
  immediateQuote,
  immediateIdentifier
}
@external tokens word from "./tokens.js" { word }
@external tokens Identifier from "./tokens.js" { Identifier }

@external tokens newline from "./tokens.js" { newline }
_t { newline | semicolon }

@tokens {
  // OPERATORS

  bdot<tokens> { '.'? tokens } // Broadcasting dot

  suffix { $[²³¹ʰʲʳʷʸˡˢˣᴬᴮᴰᴱᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾᴿᵀᵁᵂᵃᵇᵈᵉᵍᵏᵐᵒᵖᵗᵘᵛᵝᵞᵟᵠᵡᵢᵣᵤᵥᵦᵧᵨᵩᵪᶜᶠᶥᶦᶫᶰᶸᶻᶿ′″‴‵‶‷⁗⁰ⁱ⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾ⁿ₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎ₐₑₒₓₕₖₗₘₙₚₛₜⱼⱽ] }
  op<tokens> { bdot<tokens> suffix? }

  // Unary prefix operators
  TildeOp { op<'~'> } // unary / assignment
  TypeComparisonOp { op<'<:' | '>:'> } // unary / comparison
  UnaryOp { op<'!' | $[¬√∛∜]> }
  UnaryPlusOp { op<$[-+] | $[±∓]> }

  // Binary operators
  PowerOp { op<'^' | $[↑↓⇵⟰⟱⤈⤉⤊⤋⤒⤓⥉⥌⥍⥏⥑⥔⥕⥘⥙⥜⥝⥠⥡⥣⥥⥮⥯￪￬]> }
  BitshiftOp { op<'<<' | '>>' | '>>>'> }
  RationalOp { op<'//'> }
  TimesOp { op<$[*/%&\\] | $[⌿÷··⋅∘×∩∧⊗⊘⊙⊚⊛⊠⊡⊓∗∙∤⅋≀⊼⋄⋆⋇⋉⋊⋋⋌⋏⋒⟑⦸⦼⦾⦿⧶⧷⨇⨰⨱⨲⨳⨴⨵⨶⨷⨸⨻⨼⨽⩀⩃⩄⩋⩍⩎⩑⩓⩕⩘⩚⩜⩞⩟⩠⫛⊍▷⨝⟕⟖⟗⨟]> }
  PlusOp { op<'++' | '|' | $[−¦⊕⊖⊞⊟∪∨⊔∔∸≏⊎⊻⊽⋎⋓⟇⧺⧻⨈⨢⨣⨤⨥⨦⨧⨨⨩⨪⨫⨬⨭⨮⨹⨺⩁⩂⩅⩊⩌⩏⩐⩒⩔⩖⩗⩛⩝⩡⩢⩣]> }
  EllipsisOp { op<$[…⁝⋮⋱⋰⋯]> } // TODO: `..` conflicts with ImportPath
  PipeRightOp { op<'|>'> }
  PipeLeftOp { op<'<|'> }
  ComparisonOp { op<'>=' | '<=' | '==' | '===' | '!=' | '!==' | $[><] | $[≥≤≡≠≢∈∉∋∌⊆⊈⊂⊄⊊∝∊∍∥∦∷∺∻∽∾≁≃≂≄≅≆≇≈≉≊≋≌≍≎≐≑≒≓≖≗≘≙≚≛≜≝≞≟≣≦≧≨≩≪≫≬≭≮≯≰≱≲≳≴≵≶≷≸≹≺≻≼≽≾≿⊀⊁⊃⊅⊇⊉⊋⊏⊐⊑⊒⊜⊩⊬⊮⊰⊱⊲⊳⊴⊵⊶⊷⋍⋐⋑⋕⋖⋗⋘⋙⋚⋛⋜⋝⋞⋟⋠⋡⋢⋣⋤⋥⋦⋧⋨⋩⋪⋫⋬⋭⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻⋼⋽⋾⋿⟈⟉⟒⦷⧀⧁⧡⧣⧤⧥⩦⩧⩪⩫⩬⩭⩮⩯⩰⩱⩲⩳⩵⩶⩷⩸⩹⩺⩻⩼⩽⩾⩿⪀⪁⪂⪃⪄⪅⪆⪇⪈⪉⪊⪋⪌⪍⪎⪏⪐⪑⪒⪓⪔⪕⪖⪗⪘⪙⪚⪛⪜⪝⪞⪟⪠⪡⪢⪣⪤⪥⪦⪧⪨⪩⪪⪫⪬⪭⪮⪯⪰⪱⪲⪳⪴⪵⪶⪷⪸⪹⪺⪻⪼⪽⪾⪿⫀⫁⫂⫃⫄⫅⫆⫇⫈⫉⫊⫋⫌⫍⫎⫏⫐⫑⫒⫓⫔⫕⫖⫗⫘⫙⫷⫸⫹⫺⊢⊣⟂⫪⫫]> }
  ArrowOp { op<'-->' | '<--' | '<-->' | $[←→↔↚↛↞↠↢↣↦↤↮⇎⇍⇏⇐⇒⇔⇴⇶⇷⇸⇹⇺⇻⇼⇽⇾⇿⟵⟶⟷⟹⟺⟻⟼⟽⟾⟿⤀⤁⤂⤃⤄⤅⤆⤇⤌⤍⤎⤏⤐⤑⤔⤕⤖⤗⤘⤝⤞⤟⤠⥄⥅⥆⥇⥈⥊⥋⥎⥐⥒⥓⥖⥗⥚⥛⥞⥟⥢⥤⥦⥧⥨⥩⥪⥫⥬⥭⥰⧴⬱⬰⬲⬳⬴⬵⬶⬷⬸⬹⬺⬻⬼⬽⬾⬿⭀⭁⭂⭃⥷⭄⥺⭇⭈⭉⭊⭋⭌￩￫⇜⇝↜↝↩↪↫↬↼↽⇀⇁⇄⇆⇇⇉⇋⇌⇚⇛⇠⇢↷↶↺↻]> }
  PairOp { op<'=>'> }

  // Binary syntactic operators (broadcast dot, but no suffixes)
  LazyAndOp { bdot<'&&'> }
  LazyOrOp { bdot<'||'> }
  AssignmentOp { bdot<'='> }
  UpdateOp { ':=' | '$=' | bdot<(BitshiftOp | '//' | $[-+*/\\^÷%|&⊻]) '=' | $[≔⩴≕]> }

  // Other syntactic operators
  '.'
  '::'
  '...'
  '?'
  ':'
  '->'

  @precedence { UpdateOp, UnaryPlusOp }


  // NUMBERS

  numeral<n> { n (n | '_' n)* }
  dec { $[0-9] }
  hex { $[0-9A-Fa-f] }
  exp { $[Eef] $[+-]? dec+ }
  hex-exp { 'p' $[+-]? dec+ }

  FloatLiteral {
    numeral<dec> ('.' numeral<dec>? exp? | exp)
    | '.' numeral<dec> exp?
    | '0x' numeral<hex> '.'? numeral<hex>? hex-exp
    | '0x.' numeral<hex> hex-exp
  }

  IntegerLiteral {
    numeral<dec>
    | '0b' numeral<$[01]>
    | '0o' numeral<$[0-7]>
    | '0x' numeral<hex>
  }

  @precedence { FloatLiteral, '.', IntegerLiteral } // dot vs decimals, and floats vs integers


  // CHARACTERS & STRING CONTENT

  EscapeSequence {
    '\\'
    ( $[uU] hex (hex (hex hex?)?)?
    | 'x' hex hex
    | $[0-7] $[0-7] $[0-7]
    | ![xuU]
    | '\\'
    )
  }

  CharLiteral { "'" (![\\'] | EscapeSequence) "'" }

  str1-quote[@name='"', group=QuotationMark]{ '"' }
  cmd1-quote[@name='`', group=QuotationMark]{ '`' }
  str3-quote[@name='"""', group=QuotationMark]{ '"""' }
  cmd3-quote[@name='```', group=QuotationMark]{ '```' }

  str1-content { !["$\\] }
  cmd1-content { ![`$\\] }
  str3-content { (str1-content | '"' (str1-content | '"' str1-content))+ }
  cmd3-content { (cmd1-content | '`' (cmd1-content | '`' cmd1-content))+ }


  // COMMENTS

  LineComment { '#' ![=\n]? ![\n]* }
  block-comment-content { ![#=] }
  block-comment-start { '#=' }

  @precedence { block-comment-start, LineComment }


  // OTHER TOKENS

  _ws { @whitespace+ }
  semicolon { ';'+ }

  // BRACKETS (for detectDelim to work)
  '(' ')' '[' ']' '{' '}'
}

@external propSource juliaHighlighting from "./highlight.js"

@detectDelim

// vim:set lisp:
