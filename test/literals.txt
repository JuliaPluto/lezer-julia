# Boolean literals

true
false

==>
Program(
  BoolLiteral,
  BoolLiteral,
)


# Integer number literals

0b01
0o01234567
0123456789
123_456_789
0x0123456789_abcdef_ABCDEF

==>
Program(
  IntegerLiteral,
  IntegerLiteral,
  IntegerLiteral,
  IntegerLiteral,
  IntegerLiteral,
)


# Float number literals

0123456789.
.0123456789
0123456789.0123456789

9e10
9E-1
9f10
9f-1

.1e10
1.1e10
1.e10

0x0123456789_abcdef.ABCDEFp0
0x0123456789_abcdef_ABCDEF.p-1
0x.0123456789_abcdef_ABCDEFp1

==>
Program(
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
  FloatLiteral,
)


# Character literals

' '
'o'
'\t'
'\u0'
'\uffff'

==>
Program(
  CharLiteral,
  CharLiteral,
  CharLiteral,
  CharLiteral,
  CharLiteral,
)


# String literals

""
"\""
"foo
 bar"
"this is a \"string\"."
"""this is also a "string"."""
band = "Interpol"
"$band is a cool band"
"$(2*Ï€) is a cool number"
"cells interlinked within $("cells interlinked whithin $("cells interlinked whithin one stem")")"

==>
Program(
  StringLiteral,
  StringLiteral(EscapeSequence),
  StringLiteral
  StringLiteral(EscapeSequence, EscapeSequence),
  StringLiteral
  Assignment(Identifier, StringLiteral),
  StringLiteral(Identifier),
  StringLiteral(ParenExpression(BinaryExpression(IntegerLiteral, Identifier))),
  StringLiteral(ParenExpression(StringLiteral(ParenExpression(StringLiteral)))),
)


# Triple-quote string literals

"""
a "quoted" string"""
"""a $name string"""
"""a $(a + b) string"""
"""a \$name string"""

==>
Program(
  StringLiteral,
  StringLiteral(Identifier),
  StringLiteral(ParenExpression(BinaryExpression(Identifier, Identifier))),
  StringLiteral(EscapeSequence),
)


# Non-standard string literals

trailing_ws = r"\s+$"
version = v"1.0"
text = md"-- $(x) --"
K"\\"
r"fo*"i

==>
Program(
  Assignment(Identifier, NsStringLiteral(Identifier)),
  Assignment(Identifier, NsStringLiteral(Identifier)),
  Assignment(Identifier, NsStringLiteral(Identifier)),
  NsStringLiteral(Identifier, EscapeSequence),
  NsStringLiteral(Identifier, Identifier),
)


# Command string literals

`pwd`
m`pwd`
`cd $dir`
`echo \`cmd\``
```
echo "\033[31mred\033[m"
```
`foo $(a + b) bar`
`foo \$name bar`

==>
Program(
  CommandLiteral
  NsCommandLiteral(Identifier),
  CommandLiteral(Identifier),
  CommandLiteral(EscapeSequence, EscapeSequence),
  CommandLiteral(EscapeSequence, EscapeSequence),
  CommandLiteral(ParenExpression(BinaryExpression(Identifier, Identifier))),
  CommandLiteral(EscapeSequence),
)


# Comments

# line comment
#= block comment =#

x = #= inline block comment =# 1

#==#

#=
multi line comment
=#

#= nested #= block #= comments =# =# =#

==>
Program(
  LineComment
  BlockComment
  Assignment(Identifier, BlockComment, IntegerLiteral),
  BlockComment,
  BlockComment,
  BlockComment(BlockComment(BlockComment)),
)

