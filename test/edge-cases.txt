# Operators as identifiers - More operators as standalone
(!)
@>:
==>
SourceFile(
    ParenthesizedExpression(Operator),
    MacroExpression(MacroIdentifier(MacroName(Operator)),MacroArgumentList(Operator))
)


# Operators as identifiers - BROKEN: Just operators hanging out
!
.!
.<:
.>:
==>
SourceFile(Operator,Operator,Operator,Operator)

# Bitwise operator - Huh? Bitwise operators weren't in here?
1 | x
==>
SourceFile(BinaryExpression(Number,Identifier))

# Arrow operators - I mean com'on this is easy operator stuff
a .=> x
a .<| b
a |> b .<| c
==>
SourceFile(
  BinaryExpression(Identifier,Identifier),
  BinaryExpression(Identifier,"pipe<",Identifier),
  BinaryExpression(BinaryExpression(Identifier,"pipe>",Identifier),"pipe<",Identifier)
)

# Bitshift operators - BinaryExpression_bitshift_ok

a >> 2
b << 2
c >>> 3

==>
SourceFile(
  BinaryExpression(Identifier,Number),
  BinaryExpression(Identifier,Number),
  BinaryExpression(Identifier,Number)
)


# Binary expressions - operands spanning multiple lines

1 +
2

==>
SourceFile(BinaryExpression(Number,Number))


# Range binary expressions

a:b

==>
SourceFile(BinaryExpression(Identifier,Identifier))


# IDK

begin
	function under_root(x)
		ret = 2exp(+x+2) + 1
	end
end

==>
SourceFile(
  CompoundExpression(
    begin,
    FunctionDefinition(
      function,
      Definition(CallExpression(
        Identifier,
        ArgumentList(Identifier),
      )),
      AssignmentExpression(
        Identifier,
        BinaryExpression(
          CoefficientExpression(
            Number,
            Coefficient(
              CallExpression(
                Identifier,
                ArgumentList(BinaryExpression(UnaryExpression(Operator, Identifier),Number)),
              ),
            ),
          ),
          Number,
        ),
      ),
      end
    ),
    end,
  )
)


# IDK - Why though (Not sure why this was fixed but it was...????)
function pumas_be(
    data::AbstractDataFrame;
	  method::B = :AUC,
    logtransformed::B = a,
    period::Union{a} = a,
    reference::Union{a} = a,
    reml::B = a,
)
    a
end
==>
SourceFile(FunctionDefinition(function,Definition(CallExpression(Identifier,ArgumentList(
  TypedExpression(Identifier,"::",Type(Identifier)),
  Parameters(
    AssignmentExpression(TypedExpression(Identifier,"::",Type(Identifier)),Symbol(SymbolName)),
    AssignmentExpression(TypedExpression(Identifier,"::",Type(Identifier)),Identifier),
    AssignmentExpression(TypedExpression(Identifier,"::",Type(ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)))),Identifier),
    AssignmentExpression(TypedExpression(Identifier,"::",Type(ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)))),Identifier),
    AssignmentExpression(TypedExpression(Identifier,"::",Type(Identifier)),Identifier))
))),Identifier,end))
