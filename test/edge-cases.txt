# Number

12
1.2
1.1e10
1.2E10
1_000_000
0.1_000_000
1.
.1
1.2e-10
1.2e+10
0x12AF

==>

SourceFile(
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
)

# String

"hello, world"
"!!!"

==>

SourceFile(
  String,
  String
)

# String_stringInterpolation_not_really_ok

"hello $ dollar"

==>

SourceFile(String)

# Bare Tuple

"Hello", "world!"

==>

SourceFile(
  BareTupleExpression(String,String)
)

# Triple String

"""
multiline here
ok
"""

"""simple"""

==>

SourceFile(
  TripleString,
  TripleString,
)

# Line Comments

# some

==>

SourceFile(Comment)

# Block Comments

#=
 
  Block Comment

  #= NESTED =#

=#

==>

SourceFile(BlockComment)

# CallExpression

some()
some("hello")
some("hello", "world")

==>

SourceFile(
  CallExpression(Identifier,ArgumentList),
  CallExpression(Identifier,ArgumentList(String)),
  CallExpression(Identifier,ArgumentList(String, String)),
)

# FunctionDefinition_1

function some()
  "hello"
end

==>

SourceFile(
  FunctionDefinition(function,Identifier,ArgumentList,String,end)
)

# FunctionDefinition_2

function some() "hello" end

==>

SourceFile(
  FunctionDefinition(function,Identifier,ArgumentList,String,end),
)

# FunctionDefinition_3

function some() end

function some()
end

==>

SourceFile(
  FunctionDefinition(function,Identifier,ArgumentList,end),
  FunctionDefinition(function,Identifier,ArgumentList,end),
)

# FunctionDefinition_anonymous

function() end
function()
end

==>

SourceFile(
  FunctionExpression(function,ArgumentList,end),
  FunctionExpression(function,ArgumentList,end),
)

# FunctionDefinition_no_parens_ok

function name end

==>

SourceFile(
  FunctionDefinition(function,Identifier,end)
)

# FunctionDefinition_only_type_ok

function name(arg::A, ::B)
  ok
end

==>

SourceFile(
  FunctionDefinition(
    function,
    Identifier,
    ArgumentList(
      TypedExpression(Identifier,Identifier),
      TypedExpression(Identifier)
    ),
    Identifier,
    end
  )
)

# FunctionDefinition_return_type_ok

function name()::T end

==>

SourceFile(
  FunctionDefinition(
    function,
    Identifier,
    ArgumentList,
    TypedExpression(Identifier),
    end
  )
)

# FunctionDefinition_complexHead_ok

function Base.union!() end

==>

SourceFile(
  FunctionDefinition(
    function,
    FieldExpression(Identifier,FieldName),
    ArgumentList,
    end
  )
)

# TypedParameter_FieldExpression_ok

function name(param::Type.Some) end

==>

SourceFile(
  FunctionDefinition(
    function,
    Identifier,
    ArgumentList(TypedExpression(Identifier,FieldExpression(Identifier,FieldName))),
    end
  )
)

# AbstractDefinition

abstract type name end
abstract type name
end
abstract type name{param} end
abstract type name{param} <: supertype end

==>

SourceFile(
  AbstractDefinition(abstract,type,Identifier,end),
  AbstractDefinition(abstract,type,Identifier,end),
  AbstractDefinition(
    abstract,type,
    ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)),
    end
  ),
  AbstractDefinition(
    abstract,type,
    TypedExpression(
      ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier))
      Identifier
    ),
    end
  ),
)

# AbstractDefinition_TypeParameterList

abstract type name{a} end
abstract type name{a,b} end
abstract type name{a,} end
abstract type name{a,b,} end
abstract type name{a<:b} end
abstract type name{a<:b,} end
abstract type name{a, a<:b} end
abstract type name{a, a<:b,} end

==>

SourceFile(
  AbstractDefinition(abstract,type,ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)),end),
  AbstractDefinition(abstract,type,ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier,Identifier)),end),
  AbstractDefinition(abstract,type,ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)),end),
  AbstractDefinition(abstract,type,ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier,Identifier)),end),
  AbstractDefinition(abstract,type,ParameterizedIdentifier(Identifier,TypeArgumentList(TypedExpression(Identifier,Identifier))),end),
  AbstractDefinition(abstract,type,ParameterizedIdentifier(Identifier,TypeArgumentList(TypedExpression(Identifier,Identifier))),end),
  AbstractDefinition(abstract,type,ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier,TypedExpression(Identifier,Identifier))),end),
  AbstractDefinition(abstract,type,ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier,TypedExpression(Identifier,Identifier))),end))

# PrimitiveDefinition

primitive type name 42 end
primitive type name
  42
end
primitive type name{param} 42 end
primitive type name{param} <: supertype 42 end

==>

SourceFile(
  PrimitiveDefinition(primitive,type,Identifier,Number,end),
  PrimitiveDefinition(primitive,type,Identifier,Number,end),
  PrimitiveDefinition(
    primitive,type,
    ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)),
    Number,end
  ),
  PrimitiveDefinition(
    primitive,type,
    TypedExpression(
      ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)),
      Identifier
    ),
    Number,
    end
  )
)

# StructDefinition

struct name end
struct name
end
struct name{param}
end
struct name{param} <: supertype
end
struct name
  expr
end
struct name
  expr
  expr
end
mutable struct name end

==>

SourceFile(
  StructDefinition(struct,Identifier,end),
  StructDefinition(struct,Identifier,end),
  StructDefinition(struct,ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)),end),
  StructDefinition(struct,ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)),TypedExpression(Identifier),end),
  StructDefinition(struct,Identifier,Identifier,end),
  StructDefinition(struct,Identifier,Identifier,Identifier,end),
  StructDefinition(mutable,struct,Identifier,end),
)

# ModuleDefinition

module name end
module name
  expr
end

==>

SourceFile(
  ModuleDefinition(module,Identifier,end),
  ModuleDefinition(module,Identifier,Identifier,end)
)

# BareModuleDefinition

baremodule name end
baremodule name
  expr
end

==>

SourceFile(
  BareModuleDefinition(baremodule,Identifier,end),
  BareModuleDefinition(baremodule,Identifier,Identifier,end)
)

# MacroDefinition_ok

macro name() end
macro name()
end
macro name()
  expr
end

==>

SourceFile(
  MacroDefinition(macro,Identifier,ArgumentList,end),
  MacroDefinition(macro,Identifier,ArgumentList,end),
  MacroDefinition(macro,Identifier,ArgumentList,Identifier,end),
)

# MacroDefinition_complexHead_ok

macro Base.union() end

==>

SourceFile(
  MacroDefinition(
    macro,
    FieldExpression(Identifier,FieldName),
    ArgumentList,
    end
  )
)

# AssignmentExpression_1

name = "hello"

==>

SourceFile(
  AssignmentExpression(Identifier,String),
)

# FunctionAssignmentExpression_ok

name(a, b) = a + b

==>

SourceFile(
  FunctionAssignmentExpression(
    Identifier,
    ArgumentList(Identifier,Identifier),
    BinaryExpression(Identifier,Identifier)
  )
)

# FunctionAssignmentExpression_where_ok

name(a::T) where {T} = a

==>

SourceFile(
  FunctionAssignmentExpression(
    Identifier,
    ArgumentList(TypedExpression(Identifier,Identifier)),
    where,TypeArgumentList(Identifier),
    Identifier
  )
)

# FunctionExpression

(a, b) -> a + b

==>

SourceFile(
  FunctionExpression(
    ArgumentList(Identifier,Identifier),
    BinaryExpression(Identifier,Identifier),
  )
)

# Symbol

:syntax

==>

SourceFile(
  Symbol(SymbolName),
)

# QuoteExpression_2

:(a + b)

==>

SourceFile(
  QuoteExpression(ParenthesizedExpression(BinaryExpression(Identifier,Identifier))),
)

# QuoteExpression_3

quote
  $a + $b
end

==>

SourceFile(
  QuoteStatement(
    quote,
    BinaryExpression(
      InterpolationExpression(Identifier),
      InterpolationExpression(Identifier)
    ),
    end
  )
)

# QuoteExpression_4

:a + :b

==>

SourceFile(
  BinaryExpression(
    Symbol(SymbolName),
    Symbol(SymbolName),
  )
)


# CoefficientExpression

1x
3(x + 1)

==>

SourceFile(
  CoefficientExpression(Number,Identifier),
  CoefficientExpression(
    Number,
    ParenthesizedExpression(BinaryExpression(Identifier,Number)),
  )
)

# MacroExpression_ok_1

@name x
@name y z

==>

SourceFile(
  MacroExpression(MacroIdentifier(MacroName),MacroArgumentList(Identifier)),
  MacroExpression(MacroIdentifier(MacroName),MacroArgumentList(Identifier,Identifier)),
)

# MacroExpression_ok_2

@name(1, 2)

==>

SourceFile(
  MacroExpression(MacroIdentifier(MacroName),ArgumentList(Number,Number))
)

# BinaryExpression_bitshift_ok

a >> 2
b << 2
c >>> 3

==>

SourceFile(
  BinaryExpression(Identifier,Number),
  BinaryExpression(Identifier,Number),
  BinaryExpression(Identifier,Number)
)

# BinaryExpression_span

1 +
2

==>

SourceFile(BinaryExpression(Number,Number))


# MacroExpression_span_1

@name a +
  2

==>

SourceFile(
  MacroExpression(
    MacroIdentifier(MacroName),
    MacroArgumentList(BinaryExpression(Identifier,Number))
  )
)

# MacroExpression_span_2

@name a begin
  b
end

==>

SourceFile(
  MacroExpression(
    MacroIdentifier(MacroName),
    MacroArgumentList(Identifier,CompoundExpression(begin,Identifier,end))
  )
)

# MacroExpression_MacroFieldExpression_ok

Base.@name

==>

SourceFile(
  MacroExpression(
    MacroFieldExpression(Identifier,MacroIdentifier(MacroName))
  )
)

# MacroExpression_AssignmentExpression_ok

@eval a = 2

==>

SourceFile(
  MacroExpression(
    MacroIdentifier(MacroName),
    MacroArgumentList(AssignmentExpression(Identifier,Number))
  )
)

# ParenthesizedExpression_expression_ok

(1)

==>

SourceFile(ParenthesizedExpression(Number))

# ParenthesizedExpression_AssignmentExpression_ok

(a=1)

==>

SourceFile(ParenthesizedExpression(AssignmentExpression(Identifier,Number)))

# Tuple_empty_ok

()

==>

SourceFile(TupleExpression)

# Tuple_one_ok

(1,)

==>

SourceFile(TupleExpression(Number))

# Tuple_many_ok

(1,2)
(1,2,)

==>

SourceFile(
  TupleExpression(Number,Number),
  TupleExpression(Number,Number),
)

# Tuple_NamedField_one_ok

(a=1,)

==>

SourceFile(
  TupleExpression(NamedField(Identifier,Number)),
)

# Tuple_NamedField_many_ok

(a=1, b=2)

==>

SourceFile(
  TupleExpression(
    NamedField(Identifier,Number),
    NamedField(Identifier,Number)
  ),
)

# Tuple_NamedField_many_trailing_comma_ok

(a=1, b=2,)

==>

SourceFile(
  TupleExpression(
    NamedField(Identifier,Number),
    NamedField(Identifier,Number)
  ),
)

# FunctionExpression_ok

(a, b) -> a + b
(a) -> a

==>

SourceFile(
  FunctionExpression(ArgumentList(Identifier,Identifier),BinaryExpression(Identifier,Identifier)),
  FunctionExpression(ArgumentList(Identifier),Identifier),
)

# RangeExpression_ok

a:b

==>

SourceFile(RangeExpression(Identifier,Identifier))

# InterpolationExpression_call

$x(1, 2)

==>

SourceFile(
  CallExpression(
    InterpolationExpression(Identifier),
    ArgumentList(Number,Number)
  )
)

# while_call_ok

while call(); end

==>

SourceFile(
  WhileStatement(
    while,
    WhileBinding(CallExpression(Identifier,ArgumentList)),
    end
  )
)

# Import_operator_ok

import Module: ==, +

==>

SourceFile(
  ImportStatement(
    import,
    SelectedImport(Identifier,Operator,Operator)
  )
)

# SubscriptExpression_end_ok

Bc[end]
Bc[end + 1]
Bc[begin+1:end-1]

==>

SourceFile(
  SubscriptExpression(Identifier,end),
  SubscriptExpression(Identifier,BinaryExpression(end, Number)),
  SubscriptExpression(
    Identifier,
    RangeExpression(
      BinaryExpression(begin, Number),
      BinaryExpression(end, Number),
    ),
  ),
)

# SubscriptExpression_assignment_ok

arr[s += 1]

==>

SourceFile(
  SubscriptExpression(
    Identifier,
    AssignmentExpression(Identifier,Number)
  )
)

# SubscriptExpression_generator_ok

arr[x for x in xs]

==>

SourceFile(
  SubscriptExpression(
    Identifier,
    ListCompherension(
      Identifier,
      ForClause(for,ForBinding(Identifier,in,Identifier))
    ),
  ),
)


# GlobalStatement_ok

global x
global x = 1

==>

SourceFile(
  GlobalStatement(global,Identifier),
  GlobalStatement(global,AssignmentExpression(Identifier, Number))
)

# LocalStatement_ok

local x = 1

==>

SourceFile(
  LocalStatement(local,AssignmentExpression(Identifier,Number))
)

# LocalStatement_InterpolationExpression_ok

local $x = 1
local $(x) = 1

==>

SourceFile(
  LocalStatement(
    local,
    AssignmentExpression(InterpolationExpression(Identifier),Number)
  ),
  LocalStatement(
    local,
    AssignmentExpression(InterpolationExpression(ParenthesizedExpression(Identifier)),Number)
  )
)

# FieldExpression_QuoteExpression_ok

Base.:(==)

==>

SourceFile(
  FieldExpression(
    Identifier,
    QuoteExpression(ParenthesizedExpression(Operator))
  )
)

# ImportStatement_relative_ok

import ..Ok

==>

SourceFile(
  ImportStatement(
    import,
    Import(ScopedIdentifier(ScopedIdentifier(Identifier)))
  )
)

# Operator_eq_ok

:(=)
:(+=)

==>

SourceFile(
  QuoteExpression(ParenthesizedExpression(Operator)),
  QuoteExpression(ParenthesizedExpression(Operator)),
)
