# Unary operators

+a
-b
√9
-A'         # adjoint > unary
!p === !(p) # unary > call
1 ++ +2

==>
Program(
  UnaryExpression(UnaryPlusOp, Identifier),
  UnaryExpression(UnaryPlusOp, Identifier),
  UnaryExpression(UnaryOp, IntegerLiteral),
  UnaryExpression(UnaryPlusOp, AdjointExpression(Identifier), LineComment),
  BinaryExpression(UnaryExpression(UnaryOp, Identifier), ComparisonOp, UnaryExpression(UnaryOp, ParenExpression(Identifier))), LineComment,
  BinaryExpression(IntegerLiteral, UnaryExpression(UnaryPlusOp, IntegerLiteral)),
)


# Binary arithmetic operators

x^2
-x^2                # power > unary
a // b
a + b
a ++ 1 × b ⥌ 2      # (++ a (× 1 (⥌ b 2)))
A \ (v × w)

==>
Program(
  BinaryExpression(Identifier, IntegerLiteral),
  UnaryExpression(UnaryPlusOp, BinaryExpression(Identifier, IntegerLiteral, LineComment)),
  BinaryExpression(Identifier, Identifier),
  BinaryExpression(Identifier, UnaryPlusOp, Identifier),
  BinaryExpression(Identifier, BinaryExpression(IntegerLiteral, BinaryExpression(Identifier, IntegerLiteral))), LineComment,
  BinaryExpression(Identifier, ParenExpression(BinaryExpression(Identifier, Identifier))),
)


# Binary arithmetic operators - operations spanning multiple lines

1 +
2

==>
Program(
  BinaryExpression(
    IntegerLiteral,
    UnaryPlusOp,
    IntegerLiteral,
  )
)


# Operator broadcasting

a .* b .+ c
.~[x]

==>
Program(
  BinaryExpression(
    BinaryExpression(Identifier, Identifier),
    UnaryPlusOp,
    Identifier
  )
  UnaryExpression(TildeOp, VectorExpression(Identifier)),
)


# Operator suffixes

x +′ y
a^p ≡ₚ a

==>
Program(
  BinaryExpression(Identifier, UnaryPlusOp, Identifier),
  BinaryExpression(
    BinaryExpression(Identifier, Identifier),
    ComparisonOp,
    Identifier
  )
)


# Binary bitwise operators

a & b | c
(x >>> 16, x >>> 8, x) .& 0xff

==>
Program(
  BinaryExpression(BinaryExpression(Identifier, Identifier), Identifier),
  BinaryExpression(
    TupleExpression(
      BinaryExpression(Identifier, IntegerLiteral),
      BinaryExpression(Identifier, IntegerLiteral),
      Identifier,
    ),
    IntegerLiteral
  )
)


# Binary arrow-like operators

Dict(b => c, d => e)

x |>
  f |>
  g

a → b ⇶ c ⭄ d

==>
Program(
  CallExpression(
    Identifier,
    Arguments(
      BinaryExpression(Identifier, Identifier),
      BinaryExpression(Identifier, Identifier),
    ),
  ),
  BinaryExpression(
    BinaryExpression(
      Identifier,
      Identifier,
    ),
    Identifier,
  ),
  BinaryExpression(
    Identifier,
    BinaryExpression(
      Identifier,
      BinaryExpression(Identifier, Identifier),
    )
  )
)


# Binary ellipsis operators

1:10
x:y+1
# 1..10 # TODO: Fix conflict with ImportPath: BinaryExpression(IntegerLiteral, IntegerLiteral)

==>
Program(
  BinaryExpression(IntegerLiteral, IntegerLiteral),
  BinaryExpression(Identifier, BinaryExpression(Identifier, UnaryPlusOp, IntegerLiteral)),
  LineComment,
)


# Colon quines

:(:)
:(::)
:(:::)
:(:::::)

==>
Program(
  QuoteExpression(ParenExpression(Operator)),
  QuoteExpression(ParenExpression(Operator)),
  QuoteExpression(ParenExpression(UnaryExpression(Type(Operator)))),
  QuoteExpression(ParenExpression(UnaryExpression(Type(UnaryExpression(Type(Operator)))))),
)


# Binary comparison operators

a === 1
a! != 0

## NOT an assignment
a!= 1

## Chained comparisons are parsed as a single expression in Julia.  So this isn't 100% correct.
A ⊆ B ⊆ C
x ≥ 0 ≥ z

==>
Program(
  BinaryExpression(Identifier, ComparisonOp, IntegerLiteral),
  BinaryExpression(Identifier, ComparisonOp, IntegerLiteral),
  LineComment,
  BinaryExpression(Identifier, ComparisonOp, IntegerLiteral),
  LineComment,
  BinaryExpression(
    BinaryExpression(Identifier, ComparisonOp, Identifier),
    ComparisonOp,
    Identifier
  ),
  BinaryExpression(
    BinaryExpression(Identifier, ComparisonOp, IntegerLiteral),
    ComparisonOp,
    Identifier
  )
)


# Binary comparison operators - Types

Bool <: Integer

==>
Program(
    BinaryExpression(Identifier, TypeComparisonOp, Identifier),
)


# Binary logic operators

p && q
p && q || r
p .|| q .&& r

==>
Program(
    BinaryExpression(Identifier, LazyAndOp, Identifier),
    BinaryExpression(BinaryExpression(Identifier, LazyAndOp, Identifier), LazyOrOp, Identifier),
    BinaryExpression(Identifier, LazyOrOp, BinaryExpression(Identifier, LazyAndOp, Identifier)),
)


# Operators as values

!
.!

x = +
⪯ = .≤
foo(^, ÷, -)

==>
Program(
  Operator(UnaryOp),
  Operator(UnaryOp),
  Assignment(Identifier, AssignmentOp, Operator(UnaryPlusOp)),
  Assignment(Operator(ComparisonOp), AssignmentOp, Operator(ComparisonOp)),
  CallExpression(Identifier, Arguments(Operator, Operator, Operator(UnaryPlusOp))),
)


# Operators as values - function and macro names

+(1, 2)
.*(xs, ys)
@>:

==>
Program(
  UnaryExpression(UnaryPlusOp, TupleExpression(IntegerLiteral, IntegerLiteral)),
  CallExpression(Operator, Arguments(Identifier, Identifier)),
  MacrocallExpression(MacroIdentifier(Operator(TypeComparisonOp))),
)
