# Assignments
a = b
tup = 1, 2, 3
car, cdr... = list

a × b = a * b
c &= d ÷= e
xs .+= ys

A[i] = new_value

==>
Program(
  Assignment(Identifier, Identifier),
  Assignment(Identifier, OpenTuple(IntegerLiteral, IntegerLiteral, IntegerLiteral)),
  Assignment(OpenTuple(Identifier, SplatExpression(Identifier)), Identifier),

  Assignment(BinaryExpression(Identifier, Identifier), BinaryExpression(Identifier, Identifier)),
  Assignment(Identifier, Assignment(Identifier, Identifier)),
  Assignment(Identifier, Identifier),

  Assignment(IndexExpression(Identifier, VectorExpression(Identifier)), Identifier),
)

# Assignments - Short functions

id(x) = x
add(x, y) = x + y
id(x::T)::T where {T} = x

==>
Program(
  Assignment(
    CallExpression(Identifier, Arguments(Identifier)),
    Identifier
  ),
  Assignment(
    CallExpression(Identifier, Arguments(Identifier, Identifier)),
    BinaryExpression(Identifier, Identifier),
  )
  Assignment(
    BinaryExpression(
      CallExpression(Identifier, Arguments(BinaryExpression(Identifier, Identifier))),
      BinaryExpression(
        Identifier
        where,
        BraceExpression(Identifier),
      )
    )
    Identifier,
  )
)


# Type declarations

x::T
x::Vector{T} where T

==>
Program(
  BinaryExpression(Identifier, Identifier),
  BinaryExpression(
    Identifier,
    BinaryExpression(ParametrizedExpression(Identifier, BraceExpression(Identifier)), where, Identifier),
  )
)


# Arrow function expressions

x -> x^2
(x,y,z) -> 2 * x + y - z
() -> (sleep(0.1); i += 1; l)
foreach(c -> c.queued = true, cells)

==>
Program(
  ArrowFunctionExpression(
    Identifier,
    BinaryExpression(Identifier, IntegerLiteral),
  ),
  ArrowFunctionExpression(
    TupleExpression(Identifier, Identifier, Identifier),
    BinaryExpression(
      BinaryExpression(
        BinaryExpression(IntegerLiteral, Identifier),
        Identifier
      ),
      Identifier
    )
  ),
  ArrowFunctionExpression(
    TupleExpression,
    ParenExpression(
      CallExpression(Identifier, Arguments(FloatLiteral)),
      Assignment(Identifier, IntegerLiteral),
      Identifier
    )
  )
  CallExpression(
    Identifier,
    Arguments(
      ArrowFunctionExpression(
        Identifier,
        Assignment(FieldExpression(Identifier, Identifier), BoolLiteral),
      ),
      Identifier,
    )
  )
)


# Juxtaposition expressions - Coefficients

1__1 # Not an integer
2π
2v[i]
3f(x)
4df.a
5u"kg"

==>
Program(
  JuxtapositionExpression(IntegerLiteral, Identifier), LineComment,
  JuxtapositionExpression(IntegerLiteral, Identifier),
  JuxtapositionExpression(IntegerLiteral, IndexExpression(Identifier, VectorExpression(Identifier))),
  JuxtapositionExpression(IntegerLiteral, CallExpression(Identifier, Arguments(Identifier))),
  JuxtapositionExpression(IntegerLiteral, FieldExpression(Identifier, Identifier)),
  JuxtapositionExpression(IntegerLiteral, NsStringLiteral(Identifier)),
)


# Juxtaposition expressions - Monomials # FIXME
## Not parsed with the correct precedence

2x^2 - .3x
1.5x^2 - .5x
2^2x
2(x-1)^2 - 3(x-1)

==>
Program(
  LineComment,
  BinaryExpression(
    BinaryExpression(
      JuxtapositionExpression(IntegerLiteral, Identifier),
      IntegerLiteral
    ),
    JuxtapositionExpression(FloatLiteral, Identifier)
  ),
  BinaryExpression(
    BinaryExpression(
      JuxtapositionExpression(FloatLiteral, Identifier),
      IntegerLiteral
    ),
    JuxtapositionExpression(FloatLiteral, Identifier)
  ),
  BinaryExpression(
    IntegerLiteral,
    JuxtapositionExpression(IntegerLiteral, Identifier)
  ),
  BinaryExpression(
    BinaryExpression(
      JuxtapositionExpression(
        IntegerLiteral,
        ParenExpression(BinaryExpression(Identifier,IntegerLiteral))
      ),
      IntegerLiteral
    ),
    JuxtapositionExpression(
      IntegerLiteral,
      ParenExpression(
        BinaryExpression(Identifier,IntegerLiteral)
      )
    )
  )
)


# Juxtaposition expressions - Primary LHS

x'x
f()g()h()
A'B:C'D

==>
Program(
  JuxtapositionExpression(AdjointExpression(Identifier), Identifier),
  JuxtapositionExpression(
    CallExpression(Identifier, Arguments),
    CallExpression(Identifier, Arguments),
    CallExpression(Identifier, Arguments),
  ),
  BinaryExpression(
    JuxtapositionExpression(AdjointExpression(Identifier), Identifier),
    JuxtapositionExpression(AdjointExpression(Identifier), Identifier),
  )
)


# Ternary operator

x = batch_size == 1 ?
  rand(10) :
  rand(10, batch_size)

y -> y ? x : 10

==>
Program(
  Assignment(
    Identifier,
    TernaryExpression(
      BinaryExpression(Identifier, IntegerLiteral),
      CallExpression(Identifier, Arguments(IntegerLiteral)),
      CallExpression(Identifier, Arguments(IntegerLiteral, Identifier))
    )
  ),
  ArrowFunctionExpression(
    Identifier,
    TernaryExpression(
      Identifier,
      Identifier,
      IntegerLiteral,
    )
  )
)
