# More operators as standalone
(!)
@>:
==>
SourceFile(ParenthesizedExpression(Operator),MacroExpression(MacroIdentifier(MacroName(Operator))))

# Nested assignment in macro call
@macro x = x = x
==>
SourceFile(MacroExpression(MacroIdentifier(MacroName),MacroArgumentList(AssignmentExpression(Identifier,AssignmentExpression(Identifier,Identifier)))))

# Bare tuple in macro call
@macro x, y, z x, y, z
==>
SourceFile(MacroExpression(
  MacroIdentifier(MacroName),
  MacroArgumentList(
    BareTupleExpression(Identifier,Identifier,Identifier),
    BareTupleExpression(Identifier,Identifier,Identifier),
  )
))

# Weird typed argument
Type{<:Hi, ::Wow}
==>
SourceFile(ParameterizedIdentifier(Identifier,TypeArgumentList(LonelyType("<:",Type(Identifier)),LonelyType("::",Type(Identifier)))))

# Broadcast-dot-operator-call
.!(true, true, false)
==>
SourceFile(CallExpression(Operator,ArgumentList(BooleanLiteral,BooleanLiteral,BooleanLiteral)))

# Broadcast-dot-operator
.!isnan.([1,2,3])
==>
SourceFile(UnaryExpression(Operator,CallExpression(Identifier,BroadcastDot,ArgumentList(ArrayExpression(Number,Number,Number)))))

# Just operators hanging out
!
.!
.<:
.>:
==>
SourceFile(Operator,Operator,Operator,Operator)

# Huh? Bitwise operators weren't in here?
1 | x
==>
SourceFile(BinaryExpression(Number,Identifier))

# I mean com'on this is easy operator stuff
a .=> x
a .<| b
a |> b .<| c
==>
SourceFile(
  BinaryExpression(Identifier,Identifier),
  BinaryExpression(Identifier,"pipe<",Identifier),
  BinaryExpression(BinaryExpression(Identifier,"pipe>",Identifier),"pipe<",Identifier)
)

# Oh boy
@NamedTuple{a::Float64, b::String}
==>
SourceFile(MacroExpression(
  MacroIdentifier(MacroName),
  TypeArgumentList(
    TypedExpression(Identifier,"::",Type(Identifier)),
    TypedExpression(Identifier,"::",Type(Identifier)),
  )
))

# Why though (Not sure why this was fixed but it was...????)
function pumas_be(
    data::AbstractDataFrame;
	  method::B = :AUC,
    logtransformed::B = a,
    period::Union{a} = a,
    reference::Union{a} = a,
    reml::B = a,
)
    a
end
==>
SourceFile(FunctionDefinition(function,Definition(CallExpression(Identifier,ArgumentList(
  TypedExpression(Identifier,"::",Type(Identifier)),
  Parameters(
    AssignmentExpression(TypedExpression(Identifier,"::",Type(Identifier)),Symbol(SymbolName)),
    AssignmentExpression(TypedExpression(Identifier,"::",Type(Identifier)),Identifier),
    AssignmentExpression(TypedExpression(Identifier,"::",Type(ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)))),Identifier),
    AssignmentExpression(TypedExpression(Identifier,"::",Type(ParameterizedIdentifier(Identifier,TypeArgumentList(Identifier)))),Identifier),
    AssignmentExpression(TypedExpression(Identifier,"::",Type(Identifier)),Identifier))
))),Identifier,end))

# TransposeStuff
Bread' * Meat * Bread
==>
SourceFile(BinaryExpression(BinaryExpression(TransposeExpression(Identifier),Identifier),Identifier))

# TransposeStuff2
a'
==>
SourceFile(TransposeExpression(Identifier))

+
# Lonely baretuple
a, = a
==>
SourceFile()

# subscript assignment
Z[x = y = 10]
==>
SourceFile()

# Yessss
primitive = 10
==>
SourceFile(AssignmentExpression(Assignee(Identifier),Number))