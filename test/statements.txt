# If statements

if a
  b()
elseif c
  d()
  d()
else
  e()
end

# empty bodies
if a
elseif b
else
end

==>

SourceFile(
  IfStatement(
    if,Identifier,
    CallExpression(Identifier,ArgumentList),
    ElseifClause(
      elseif,Identifier,
      CallExpression(Identifier,ArgumentList),
      CallExpression(Identifier,ArgumentList)
    ),
    ElseClause(
      else,
      CallExpression(Identifier,ArgumentList)
    ),
    end
  ),
  Comment,
  IfStatement(
    if,Identifier,
    ElseifClause(elseif,Identifier),
    ElseClause(else),
    end
  )
)

# For statements

for i in [1, 2, 3]
  print(i)
end

for (a, b) in c
  print(a, b)
end

==>

SourceFile(
  ForStatement(
    for,
    ForBinding(
      Identifier,in,
      ArrayExpression(Number,Number,Number)
    ),
    CallExpression(Identifier,ArgumentList(Identifier)),
    end
  ),
  ForStatement(
    for,
    ForBinding(
      TupleExpression(Identifier,Identifier),in,
      Identifier
    ),
    CallExpression(Identifier,ArgumentList(Identifier,Identifier)),
    end
  )
)

# While statements

while i < 5
  print(i)
  continue
  break
end

while a(); b(); end
while a() b(); end

==>

SourceFile(
  WhileStatement(
    while,
    BinaryExpression(Identifier,Number),
    CallExpression(Identifier,ArgumentList(Identifier)),
    ContinueStatement(continue),
    BreakStatement(break),
    end
  ),
  WhileStatement(
    while,
    CallExpression(Identifier,ArgumentList),
    CallExpression(Identifier,ArgumentList),
    end
  ),
  WhileStatement(
    while,
    CallExpression(Identifier,ArgumentList),
    CallExpression(Identifier,ArgumentList),
    end
  )
)

# Return statements

return
return a
return a || b
return a, b, c

==>

SourceFile(
  ReturnStatement(return),
  ReturnStatement(return,
    Identifier),
  ReturnStatement(return,
    BinaryExpression(Identifier,Identifier)),
  ReturnStatement(return,
    BareTupleExpression(Identifier,Identifier,Identifier))
)

# Let statements

let var1 = value1, var2, var3 = value3
    code
end

==>

SourceFile(
  LetStatement(let,
    VariableDeclaration(Identifier,Identifier),
    VariableDeclaration(Identifier),
    VariableDeclaration(Identifier,Identifier),
    Identifier,
    end
  )
)

# Const statements

const x, y = 5

==>

SourceFile(
<<<<<<< Updated upstream
  ConstStatement(const,
    VariableDeclaration(Identifier),
    VariableDeclaration(Identifier,Number)
  )
=======
  ConstStatement(
    const,
    AssignmentExpression(
      Definition(BareTupleExpression(Identifier,Identifier)),
      Number,
    ),
  ),
>>>>>>> Stashed changes
)

# Quote statements

quote
  x = 1
  y = 2
  x + y
end

==>

SourceFile(
  QuoteStatement(quote,
    AssignmentExpression(Definition(Identifier),Number),
    AssignmentExpression(Definition(Identifier),Number),
    BinaryExpression(Identifier,Identifier),
    end
  )
)

# Try statements

try
    sqrt(x)
catch
    sqrt(complex(x, 0))
end

try
    operate_on_file(f)
finally
    close(f)
end

==>

SourceFile(
  TryStatement(try,
    CallExpression(Identifier,ArgumentList(Identifier)),
    CatchClause(catch,
      CallExpression(
        Identifier,
        ArgumentList(
          CallExpression(Identifier,ArgumentList(Identifier,Number))
        )
      )
    ),
    end
  ),
  TryStatement(try,
    CallExpression(Identifier,ArgumentList(Identifier)),
    FinallyClause(finally,
      CallExpression(Identifier,ArgumentList(Identifier))
    ),
    end
  )
)

# Import statements

using Lib
using BigLib: thing1, thing2
import Base.show
import .A: @b
using A, B, C
import A as B
import A.B as C
import CSV: a as b
import A: a as b, b as a, c
using A: a as c
import Pkg: Artifacts.archive_artifacts as aa
import Base: + as -
using Printf: @sprintf as @format

==>

SourceFile(
  ImportStatement(using,
    Import(Identifier)),
  ImportStatement(using,
    SelectedImport(Identifier,Identifier,Identifier)),
  ImportStatement(import,
    Import(ScopedIdentifier(Identifier,Identifier))),
  ImportStatement(import,
    SelectedImport(
      ScopedIdentifier(Identifier),
      MacroIdentifier(Identifier)
    )
  ),
  ImportStatement(using,
    Import(Identifier,Identifier,Identifier)
  ),
  ImportStatement(import,
    Import(RenamedIdentifier(Identifier,as,Identifier))
  ),
  ImportStatement(import,
    Import(RenamedIdentifier(ScopedIdentifier(Identifier,Identifier),as,Identifier))
  ),
  ImportStatement(import,
    SelectedImport(Identifier,RenamedImport(Identifier,as,Identifier)),
  ),
  ImportStatement(import,
    SelectedImport(Identifier,RenamedImport(Identifier,as,Identifier),RenamedImport(Identifier,as,Identifier),Identifier),
  ),
  ImportStatement(using,
    SelectedImport(Identifier,RenamedImport(Identifier,as,Identifier)),
  ),
  ImportStatement(import,
    SelectedImport(Identifier,RenamedImport(ScopedIdentifier(Identifier,Identifier),as,Identifier))
  ),
  ImportStatement(import,
    SelectedImport(Identifier,RenamedImport(Operator,as,Operator)),
  ),
  ImportStatement(using,
    SelectedImport(Identifier,RenamedImport(MacroIdentifier(Identifier),as,MacroIdentifier(Identifier)))
  )
)

# Export statements

export a
export a, b, c

==>

SourceFile(
  ExportStatement(export,Identifier),
  ExportStatement(export,Identifier,Identifier,Identifier)
)

# Comments

# comment
#= comment =#
#=
comment
=#
x = #= comment =# 1

#=
nested #= comments =# =#
#==#

==>

SourceFile(
  Comment,
  BlockComment,
  BlockComment,
  AssignmentExpression(Definition(Identifier),BlockComment,Number),
  BlockComment,
  BlockComment,
)
