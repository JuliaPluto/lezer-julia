# Let statements without declarations

let
    code
end

==>

SourceFile(
  LetStatement(let,
    Identifier,
    end
  )
)


# Escaped backslash

"\\" # i am a comment "

==>

SourceFile(String, Comment)


# Prefixed strings

z = md"$(x)"

==>

SourceFile(
  AssignmentExpression(
    Identifier,
    PrefixedString(Identifier,StringWithoutInterpolation),
  ),
)


# Macro with @ at the beginning

@Test.test 1 == 1

==>

SourceFile(
  MacroExpression(
    MacroFieldExpression(MacroIdentifier(MacroName),MacroFieldName),
    MacroArgumentList(BinaryExpression(Number,Number))
  )
)


# Symbol with operator

:if

==>

SourceFile(Symbol(SymbolName))


# Keyword as fieldname

object.if

==>

SourceFile(FieldExpression(Identifier,FieldName))


# Multiple assignments

const x = a, b

==>

SourceFile(
  ConstStatement(
    const,
    AssignmentExpression(
      Identifier,
      BareTupleExpression(Identifier,Identifier)
    ),
  ),
)


# Transpose

A'B:C'D

==>

SourceFile(
  RangeExpression(
    TransposeExpression(Identifier,Identifier),
    TransposeExpression(Identifier,Identifier),
  ),
)


# IDK

begin
	function under_root(x)
		ret = 2exp(+x+2) + 1
	end
end

==>

SourceFile()

