# Macro in export
export @macroname
export somename, @andamacroname, andsomethingelse
==>
SourceFile(
  ExportStatement(export,MacroIdentifier(MacroName)),
  ExportStatement(export,Identifier,MacroIdentifier(MacroName),Identifier),
)


# BROKEN: Tuple parameters
function (x; y) end
==>
SourceFile()


# Broadcast call
zip.(xs)
==>
SourceFile(CallExpression(Identifier,BroadcastDot,ArgumentList(Identifier)))


# Ternary inside function expression
y -> y ? x : 10
==>
SourceFile(FunctionExpression(Identifier,TernaryExpression(Identifier,Identifier,Number)))


# Typed do
f() do x::Int; end
==>
SourceFile(CallExpression(Identifier,ArgumentList,DoClause(do,DoClauseArguments(TypedExpression(Identifier,"::",Type(Identifier))),end)))


# FunctionExpression with assignment
foreach(c -> c.queued = true)
==>
SourceFile(CallExpression(Identifier,ArgumentList(FunctionExpression(Identifier,AssignmentExpression(FieldExpression(Identifier,FieldName),BooleanLiteral)))))


# FunctionExpression with assignment and another argument (Broken but it is okay-ish)
foreach(c -> c.queued = true, cells)
==>
SourceFile(CallExpression(
  Identifier,
  ArgumentList(
    FunctionExpression(
      Identifier,
      AssignmentExpression(FieldExpression(Identifier,FieldName),BooleanLiteral)
    ),
    Identifier,
  )
))


# FunctionExpression with another argument
foreach(c -> c.queued, cells)
==>
SourceFile(CallExpression(
  Identifier,
  ArgumentList(
    FunctionExpression(Identifier,FieldExpression(Identifier,FieldName)),
    Identifier,
  ),
))


# No argument do
f() do; end
==>
SourceFile(CallExpression(Identifier,ArgumentList,DoClause(do,end)))


# One argument do
f() do x x end
==>
SourceFile(CallExpression(Identifier,ArgumentList,DoClause(do,DoClauseArguments(Identifier),Identifier,end)))


# Function with return type
function f()::Int
end
==>
SourceFile(FunctionDefinition(
  function,
  Definition(
    TypedExpression(
      CallExpression(Identifier,ArgumentList),
      Type(Identifier),
    ),
  ),
  end
))


# Function with where T
function f()::T where T
end
==>
SourceFile(
  FunctionDefinition(
    function,
    Definition(
      TypedExpression(
        CallExpression(Identifier, ArgumentList),
        Type(Identifier),
      )
    ),
    where,
    TypeParameters(Identifier),
    end
  )
)

# number with tuple coeffecient
1(x, y)
==>
SourceFile(CoefficientExpression(Number,Coefficient(TupleExpression(Identifier,Identifier))))


# BROKEN: FieldExpression in PrefixedString
module.macro"aaa"
==>
SourceFile()


# FieldExpression in Coefficient
10x.a
==>
SourceFile(CoefficientExpression(Number,Coefficient(FieldExpression(Identifier,FieldName))))


# BROKEN: Interpolation in hcat
:([x $y])
==> 
SourceFile(
  QuoteExpression(ParenthesizedExpression(
    MatrixExpression(MatrixRow(
      Identifier,
      InterpolationExpression(Identifier),
    )),
  )),
)


# Let statements without declarations
let
    code
end
==>
SourceFile(
  LetStatement(let,
    Identifier,
    end
  )
)


# Escaped backslash
"\\" # i am a comment "
==>
SourceFile(String, Comment)


# Prefixed strings
md"$(x)"
==>
SourceFile(PrefixedString(Prefix(Identifier),StringWithoutInterpolation))


# Macro with @ at the beginning
@Test.test 1 == 1
==>
SourceFile(
  MacroExpression(
    MacroFieldExpression(MacroIdentifier(MacroName),MacroFieldName),
    MacroArgumentList(BinaryExpression(Number,Number))
  )
)


# Symbol with operator
:if
==>
SourceFile(Symbol(SymbolName))


# Keyword as fieldname
object.if
==>
SourceFile(FieldExpression(Identifier,FieldName))


# Multiple assignments
const x = a, b
==>
SourceFile(
  ConstStatement(
    const,
    AssignmentExpression(
      Identifier,
      BareTupleExpression(Identifier,Identifier)
    ),
  ),
)


# Generator in sum
sum(x for x in g)
==>
SourceFile(
  CallExpression(
    Identifier,
    ArgumentList(
      ListCompherension(Identifier,ForClause(for,ForBinding(Identifier,in,Identifier))),
    ),
  ),
)


# Multiple bindings in sum
sum(x for x in g, y in z)
sum(c for c in d, e = 5)
==>
SourceFile(
  CallExpression(
    Identifier,
    ArgumentList(
      ListCompherension(
        Identifier,
        ForClause(
          for,
          ForBinding(Identifier,in,Identifier),
          ForBinding(Identifier,in,Identifier),
        ),
      ),
    ),
  ),
  CallExpression(
    Identifier,
    ArgumentList(
      ListCompherension(
        Identifier,
        ForClause(
          for,
          ForBinding(Identifier,in,Identifier),
          ForBinding(Identifier,Number),
        ),
      ),
    ),
  ),
)

# Transpose

A'B:C'D

==>

SourceFile(
  RangeExpression(
    TransposeExpression(Identifier,Identifier),
    TransposeExpression(Identifier,Identifier),
  ),
)


# IDK

begin
	function under_root(x)
		ret = 2exp(+x+2) + 1
	end
end

==>

SourceFile(
  CompoundExpression(
    begin,
    FunctionDefinition(
      function,
      Definition(CallExpression(
        Identifier,
        ArgumentList(Identifier),
      )),
      AssignmentExpression(
        Identifier,
        BinaryExpression(
          CoefficientExpression(
            Number,
            Coefficient(
              CallExpression(
                Identifier,
                ArgumentList(BinaryExpression(UnaryExpression(Identifier),Number)),
              ),
            ),
          ),
          Number,
        ),
      ),
      end
    ),
    end,
  )
)

# IDK2

2xxx()

==>

SourceFile(
  CoefficientExpression(
    Number,
    Coefficient(
      CallExpression(Identifier,ArgumentList),
    ),
  ),
)


# Macro do call
@test() do x, y

end
==>
SourceFile(MacroExpression(MacroIdentifier(MacroName),ArgumentList,DoClause(do,DoClauseArguments(Identifier,Identifier),end)))


# Proper terminator

if true end
if true
end
if true x end
if true x else end
if true x else y end

==>

SourceFile(
  IfStatement(IfClause(if,BooleanLiteral()),end),
  IfStatement(IfClause(if,BooleanLiteral()),end),
  IfStatement(IfClause(if,BooleanLiteral()),Identifier,end),
  IfStatement(IfClause(if,BooleanLiteral()),Identifier,ElseClause(else),end),
  IfStatement(IfClause(if,BooleanLiteral()),Identifier,ElseClause(else,Identifier),end),
)

# Boolean

true
false

==>

SourceFile(
  BooleanLiteral,
  BooleanLiteral,
)


