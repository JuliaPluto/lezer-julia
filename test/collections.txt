# Tuples

()
# There's no (,)

(a) # NOT a tuple
(a,)
(a,b,c)
(a,b,c,)


==>
Program(
  TupleExpression,
  LineComment,
  ParenExpression(Identifier),
  LineComment,
  TupleExpression(Identifier),
  TupleExpression(Identifier, Identifier, Identifier)
  TupleExpression(Identifier, Identifier, Identifier)
)


# Named tuples

(a = 1,)
(a = 1) # NOT a tuple
(a = 1, b = 2)

==>
Program(
  TupleExpression(NamedField(Identifier, IntegerLiteral)),
  ParenExpression(Assignment(Identifier, IntegerLiteral)),
  LineComment,
  TupleExpression(NamedField(Identifier, IntegerLiteral), NamedField(Identifier, IntegerLiteral))
)


# Named tuples with leading semicolon

(;)
(; a)
(; a, b)
(; a = 1)
(; a = 1, b = 2)
(; a, foo.b)

==>
Program(
  TupleExpression,
  TupleExpression(Identifier),
  TupleExpression(Identifier, Identifier),
  TupleExpression(NamedField(Identifier, IntegerLiteral)),
  TupleExpression(NamedField(Identifier, IntegerLiteral), NamedField(Identifier, IntegerLiteral)),
  TupleExpression(Identifier, FieldExpression(Identifier, Field(Identifier)))
)


# Vector arrays

[]
# There's no [,]
[x]
[x,]
[1, 2]

==>
Program(
  VectorExpression,
  LineComment
  VectorExpression(Identifier),
  VectorExpression(Identifier),
  VectorExpression(IntegerLiteral, IntegerLiteral),
)


# Matrix arrays

[x;]
[1 2]

[1 2; 3 4]
[1 2
 3 4]

[1
 2
 3
]
[
 a;
 b;
 c;
]

## this is tecnically parsed incorrectly. `;;` concatenates along the 2nd dimension.
[1;; 2;; 3;;; 4;; 5;; 6;;]

==>
Program(
  MatrixExpression(MatrixRow(Identifier)),
  MatrixExpression(MatrixRow(IntegerLiteral, IntegerLiteral)),

  MatrixExpression(MatrixRow(IntegerLiteral, IntegerLiteral), MatrixRow(IntegerLiteral, IntegerLiteral)),
  MatrixExpression(MatrixRow(IntegerLiteral, IntegerLiteral), MatrixRow(IntegerLiteral, IntegerLiteral)),

  MatrixExpression(MatrixRow(IntegerLiteral), MatrixRow(IntegerLiteral), MatrixRow(IntegerLiteral)),
  MatrixExpression(MatrixRow(Identifier), MatrixRow(Identifier), MatrixRow(Identifier)),

  LineComment,
  MatrixExpression(
    MatrixRow(IntegerLiteral),
    MatrixRow(IntegerLiteral),
    MatrixRow(IntegerLiteral),
    MatrixRow(IntegerLiteral),
    MatrixRow(IntegerLiteral),
    MatrixRow(IntegerLiteral)
  )
)


# Field expressions - typed_ncat

Int[1 2 3 4]

==>
Program(
  IndexExpression(
    Identifier,
    MatrixExpression(MatrixRow(IntegerLiteral, IntegerLiteral, IntegerLiteral, IntegerLiteral)),
  )
)


# Comprehension arrays

[x for x in xs]
UInt[b(c, e) for c in d for e in f]

==>
Program(
  ComprehensionExpression(
    Generator(
      Identifier,
      GenFor(for, ForBinding(Identifier, in, Identifier)),
    )
  ),
  IndexExpression(
    Identifier,
    ComprehensionExpression(
      Generator(
        CallExpression(Identifier, Arguments(Identifier, Identifier)),
        GenFor(for, ForBinding(Identifier, in, Identifier)),
        GenFor(for, ForBinding(Identifier, in, Identifier)),
      )
    )
  )
)


# Generator expressions

(b(c, e) for c in d if e)
(b(c, e) for c in d, e = 5)
(b(c, e) for c in d, e = 5 if e)

==>
Program(
  ParenExpression(
    Generator(
      CallExpression(Identifier, Arguments(Identifier, Identifier)),
      GenFor(for, ForBinding(Identifier, in, Identifier)),
      GenFilter(if, Identifier),
    )
  ),
  ParenExpression(
    Generator(
      CallExpression(Identifier, Arguments(Identifier, Identifier)),
      GenFor(for, ForBinding(Identifier, in, Identifier), ForBinding(Identifier, IntegerLiteral)),
    )
  ),
  ParenExpression(
    Generator(
      CallExpression(Identifier, Arguments(Identifier, Identifier)),
      GenFor(for, ForBinding(Identifier, in, Identifier), ForBinding(Identifier, IntegerLiteral)),
      GenFilter(if, Identifier),
    )
  ),
)


# Generator expressions in function calls

f(i for i in iter)
f(1, 2, x for x = xs)
f(1, 2, x + y for x = xs, y = ys)

==>
Program(
  CallExpression(
    Identifier,
    Arguments(
      Generator(
        Identifier,
        GenFor(for, ForBinding(Identifier, in, Identifier)),
      )
    )
  )
  CallExpression(
    Identifier,
    Arguments(
      IntegerLiteral,
      IntegerLiteral,
      Generator(
        Identifier,
        GenFor(for, ForBinding(Identifier, Identifier)),
      )
    )
  ),
  CallExpression(
    Identifier,
    Arguments(
      IntegerLiteral,
      IntegerLiteral,
      Generator(
        BinaryExpression(
          Identifier,
          Identifier,
        )
        GenFor(for, ForBinding(Identifier, Identifier), ForBinding(Identifier, Identifier)),
      )
    )
  )
)
