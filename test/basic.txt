# Number

12
1.2
1.1e10
1.2E10
1_000_000
0.1_000_000
1.
.1
1.2e-10
1.2e+10
0x12AF

==>

SourceFile(
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
)

# String

"hello, world"
"!!!"

==>

SourceFile(
  String,
  String
)

# Bare Tuple

"Hello", "world!"

==>

SourceFile(
  BareTupleExpression(String,String)
)

# Tuple_ok

(1, 2)

==>

SourceFile(
  ParenthesizedExpression(BareTupleExpression(Number,Number))
)

# Triple String

"""
multiline here
ok
"""

"""simple"""

==>

SourceFile(
  TripleString,
  TripleString,
)

# Line Comments

# some

==>

SourceFile(Comment)

# Block Comments

#=
 
  Block Comment

  #= NESTED =#

=#

==>

SourceFile(BlockComment)

# CallExpression

some()
some("hello")
some("hello", "world")

==>

SourceFile(
  CallExpression(Identifier,ArgumentList),
  CallExpression(Identifier,ArgumentList(String)),
  CallExpression(Identifier,ArgumentList(String, String)),
)

# FunctionDefinition_1

function some()
  "hello"
end

==>

SourceFile(FunctionDefinition(function,Identifier,ParameterList,String,end))

# FunctionDefinition_2

function some() "hello" end

==>

SourceFile(
  FunctionDefinition(function,Identifier,ParameterList,String,end),
)

# FunctionDefinition_3

function some() end

function some()
end

==>

SourceFile(
  FunctionDefinition(function,Identifier,ParameterList,end),
  FunctionDefinition(function,Identifier,ParameterList,end),
)

# AssignmentExpression_1

name = "hello"

==>

SourceFile(
  AssignmentExpression(Identifier,String),
)

# AssignmentExpression_2

name(a, b) = a + b

==>

SourceFile(
  AssignmentExpression(
    CallExpression(Identifier,ArgumentList(Identifier,Identifier)),
    BinaryExpression(Identifier,Identifier),
  )
)

# FunctionExpression

(a, b) -> a + b

==>

SourceFile(
  FunctionExpression(
    ParameterList(Identifier,Identifier),
    BinaryExpression(Identifier,Identifier),
  )
)

# QuoteExpression_1

:syntax

==>

SourceFile(
  QuoteExpression(Identifier),
)

# QuoteExpression_2

:(a + b)

==>

SourceFile(
  QuoteExpression(ParenthesizedExpression(BinaryExpression(Identifier,Identifier))),
)

# QuoteExpression_3

quote
  $a + $b
end

==>

SourceFile(
  QuoteStatement(
    quote,
    BinaryExpression(
      InterpolationExpression(Identifier),
      InterpolationExpression(Identifier)
    ),
    end
  )
)

# QuoteExpression_4

:a + :b

==>

SourceFile(
  BinaryExpression(
    QuoteExpression(Identifier),
    QuoteExpression(Identifier),
  )
)


# CoefficientExpression

1x
3(x + 1)

==>

SourceFile(
  CoefficientExpression(Number,Identifier),
  CoefficientExpression(
    Number,
    ParenthesizedExpression(BinaryExpression(Identifier,Number)),
  )
)

# MacroExpression_ok_1

@name x
@name y z

==>

SourceFile(
  MacroExpression(MacroIdentifier(Identifier),MacroArgumentList(Identifier)),
  MacroExpression(MacroIdentifier(Identifier),MacroArgumentList(Identifier,Identifier)),
)

# MacroExpression_ok_2

@name(1, 2)

==>

SourceFile(
  MacroExpression(MacroIdentifier(Identifier),ArgumentList(Number,Number))
)

# BinaryExpression_span

1 +
2

==>

SourceFile(BinaryExpression(Number,Number))


# MacroExpression_span_1

@name a +
  2

==>

SourceFile(
  MacroExpression(
    MacroIdentifier(Identifier),
    MacroArgumentList(BinaryExpression(Identifier,Number))
  )
)

# MacroExpression_span_2

@name a begin
  b
end

==>

SourceFile(
  MacroExpression(
    MacroIdentifier(Identifier),
    MacroArgumentList(Identifier,CompoundExpression(begin,Identifier,end))
  )
)
